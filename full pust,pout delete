const express = require('express')
const path = require('path')

const {open} = require('sqlite')
const sqlite3 = require('sqlite3')

const app = express()
const dbPath = path.join(__dirname, 'goodreads.db')
app.use(express.json())
let db = null

const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server Running at http://localhost:3000/')
    })
  } catch (e) {
    console.log(`DB Error: ${e.message}`)
    process.exit(1)
  }
}
initializeDBAndServer()

// Get Books API
app.get('/books/', async (request, response) => {
  const getBooksQuery = `
    SELECT
      *
    FROM
      book
    ORDER BY
      book_id;`
  const booksArray = await db.all(getBooksQuery)
  response.send(booksArray)
})

//Get Book API
app.get('/books/:bookId/', async (request, response) => {
  const {bookId} = request.params
  const sqlquery = `
  SELECT 
  * 
  FROM 
  book
  WHERE 
  book_id = ${bookId};

  `
  const denddata = await db.get(sqlquery)
  response.send(denddata)
})

app.post('/books/', async (request, response) => {
  const bookdetails = request.body
  const {
    title,
    authorId,
    rating,
    ratingCount,
    reviewCount,
    description,
    pages,
    dateOfPublication,
    editionLanguage,
    price,
    onlineStores,
  } = bookdetails

  const addBookQuery = `
    INSERT INTO
      book (title,author_id,rating,rating_count,review_count,description,pages,date_of_publication,edition_language,price,online_stores)
    VALUES
      (
        '${title}',
         ${authorId},
         ${rating},
         ${ratingCount},
         ${reviewCount},
        '${description}',
         ${pages},
        '${dateOfPublication}',
        '${editionLanguage}',
         ${price},
        '${onlineStores}'
      );`
  const dbresponse = await db.run(addBookQuery)
  const reso = dbresponse.lastID
  response.send({reso: reso})
})

app.put('/books/:bookId/', async (request, response) => {
  const bookdetails = request.body
  const {bookId} = request.params
  const {
    title,
    authorId,
    rating,
    ratingCount,
    reviewCount,
    description,
    pages,
    dateOfPublication,
    editionLanguage,
    price,
    onlineStores,
  } = bookdetails

  const sqlquiery = `
  UPDATE 
  book
  SET 
  title='${title}',
      author_id=${authorId},
      rating=${rating},
      rating_count=${ratingCount},
      review_count=${reviewCount},
      description='${description}',
      pages=${pages},
      date_of_publication='${dateOfPublication}',
      edition_language='${editionLanguage}',
      price= ${price},
      online_stores='${onlineStores}'
    WHERE
      book_id = ${bookId};`
  const final = await db.run(sqlquiery)
  response.send('final')
})

//delete
app.delete('/books/:bookId/', async (request, response) => {
  const {bookId} = request.params
  const sqlquires = `
  DELETE 
  FROM 
  book
  WHERE book_id = ${bookId};`
  const final = await db.run(sqlquires)
  response.send('deleted')
})

app.get('/authors/:authorId/books', async (request, response) => {
  const {authorId} = request.params
  const alldata = `
  SELECT 
  * 
  FROM 
  book 
  WHERE 
  author_id = ${authorId};
  `
  const solution = await db.all(alldata)
  response.send(solution)
})
